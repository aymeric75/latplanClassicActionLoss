Default float: float32
{'mode': 'learn', 'type': 'mnist', 'width': 3, 'height': 3, 'num_examples': 1000, 'aeclass': 'CubeSpaceAE_AMA4Conv', 'comment': 'kltune2', 'hash': '05-06T14:43:56.755REALOneHotX0Y0by10'}
loaded. picsize: [48, 48]
(1000, 2, 48, 48, 1)
normalized shape: (48, 48, 1) (48, 48, 1)
config du puzzle

[2.00000 3.00000 8.00000 0.00000 1.00000 6.00000 4.00000 7.00000 5.00000]
[5.00000 3.00000 8.00000 0.00000 1.00000 6.00000 4.00000 7.00000 2.00000]
loaded. picsize: [48, 48]
(1000, 2, 48, 48, 1)
normalized shape: (48, 48, 1) (48, 48, 1)
actions_transitionsactions_transitions
<class 'numpy.ndarray'>
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0]
samples/puzzle_mnist_3_3_1000_CubeSpaceAE_AMA4Conv_kltune2/logs/05-06T14:43:56.755REALOneHotX0Y0by10
paramA
24
900
50
class precedence list:
  <class 'latplan.model.ConvolutionalConcreteDetNormalizedLogitAddBidirectionalTransitionAEPlus'>
  <class 'latplan.mixins.encoder_decoder.StridedConvolutionalMixin'>
  <class 'latplan.mixins.encoder_decoder.ConvolutionalMixin'>
  <class 'latplan.model.ConcreteDetNormalizedLogitAddBidirectionalTransitionAEPlus'>
  <class 'latplan.model.DetActionMixin'>
  <class 'latplan.model.NormalizedLogitAddBidirectionalMixin'>
  <class 'latplan.model.NormalizedLogitAddPreconditionMixin'>
  <class 'latplan.model.NormalizedLogitAddEffectMixin'>
  <class 'latplan.model.LogitEffectMixin'>
  <class 'latplan.model.BaseActionMixinAMA4Plus'>
  <class 'latplan.model.BidirectionalMixin'>
  <class 'latplan.model.PreconditionMixin'>
  <class 'latplan.model.EffectMixin'>
  <class 'latplan.model.BaseActionMixin'>
  <class 'latplan.model.TransitionWrapper'>
  <class 'latplan.model.StateAE'>
  <class 'latplan.mixins.latent.ConcreteLatentMixin'>
  <class 'latplan.model.EarlyStopMixin'>
  <class 'latplan.mixins.encoder_decoder.FullConnectedMixin'>
  <class 'latplan.mixins.encoder_decoder.EncoderDecoderMixin'>
  <class 'latplan.model.AE'>
  <class 'latplan.network.Network'>
  <class 'object'>
clearning tf session
cleared tf session
Building networks
building a convolutional encoder
pool per layer: 1 depth: 2 total pool: 1 H: 48 W: 48 dH: 0 dW: 0
<keras.layers.convolutional.Conv2D object at 0x7f5b9c61ea00>
[0, 48, 48, 1] -> (0, 48, 48, 32) : <keras.layers.convolutional.Conv2D object at 0x7f5b9c61ea00>
<keras.layers.normalization.BatchNormalization object at 0x7f5b9c61eeb0>
(0, 48, 48, 32) -> (0, 48, 48, 32) : <keras.layers.normalization.BatchNormalization object at 0x7f5b9c61eeb0>
<keras.layers.core.Dropout object at 0x7f5b9c61ef70>
(0, 48, 48, 32) -> (0, 48, 48, 32) : <keras.layers.core.Dropout object at 0x7f5b9c61ef70>
<keras.layers.convolutional.Conv2D object at 0x7f5b9c61efd0>
(0, 48, 48, 32) -> (0, 48, 48, 32) : <keras.layers.convolutional.Conv2D object at 0x7f5b9c61efd0>
<keras.layers.normalization.BatchNormalization object at 0x7f5b9c6290a0>
(0, 48, 48, 32) -> (0, 48, 48, 32) : <keras.layers.normalization.BatchNormalization object at 0x7f5b9c6290a0>
<keras.layers.core.Dropout object at 0x7f5b9c6291c0>
(0, 48, 48, 32) -> (0, 48, 48, 32) : <keras.layers.core.Dropout object at 0x7f5b9c6291c0>
latent space shape is (48, 48, 32) : 100 propositions in total
building a convolutional decoder
pool per layer: 1 depth: 2 total pool: 1 H: 48 W: 48 dH: 0 dW: 0
<keras.layers.core.Reshape object at 0x7f5b9c6297c0>
[0, 48, 48, 32] -> (0, 48, 48, 32) : <keras.layers.core.Reshape object at 0x7f5b9c6297c0>
<keras.layers.convolutional.Conv2DTranspose object at 0x7f5b9c6297f0>
(0, 48, 48, 32) -> (0, 48, 48, 32) : <keras.layers.convolutional.Conv2DTranspose object at 0x7f5b9c6297f0>
<keras.layers.normalization.BatchNormalization object at 0x7f5b9c6299d0>
(0, 48, 48, 32) -> (0, 48, 48, 32) : <keras.layers.normalization.BatchNormalization object at 0x7f5b9c6299d0>
<keras.layers.core.Dropout object at 0x7f5b9c629f10>
(0, 48, 48, 32) -> (0, 48, 48, 32) : <keras.layers.core.Dropout object at 0x7f5b9c629f10>
<keras.layers.convolutional.Conv2DTranspose object at 0x7f5b9c629910>
(0, 48, 48, 32) -> (0, 48, 48, 1) : <keras.layers.convolutional.Conv2DTranspose object at 0x7f5b9c629910>
uhuhihh
(?, 3, 48, 48, 1)
gggggggggggggg
(?, 48, 48, 1)
(24,)
(?, 1, 24)
lol
(?, 24)
(?, 24)
(?, 24)
Network built
Building auxiliary networks
Auxiliary network built
Compiling networks
there are 1 networks.
there are 1 optimizers.
there are 1 losses.
compiling <keras.engine.training.Model object at 0x7f5fea910e20> with <keras_radam.optimizers.RAdam object at 0x7f5fea3ab850>, <function BaseActionMixinAMA4Plus._build_primary.<locals>.loss at 0x7f5fec9b6e50>.
Network compiled
Saving the network to samples/puzzle_mnist_3_3_1000_CubeSpaceAE_AMA4Conv_kltune2/logs/05-06T14:43:56.755REALOneHotX0Y0by10/logs/05-06T14:43:56.755/
saving additional networks
Network saved
evaluate2
